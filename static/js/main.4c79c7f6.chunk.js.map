{"version":3,"sources":["store/auth.context.tsx","components/Auth/Login.styles.ts","components/Auth/Login.tsx","components/Layout/MainNavigation.styles.ts","components/Layout/MainNavigation.tsx","components/Layout/Layout.tsx","components/Item/Item.styles.ts","components/Item/Item.tsx","components/CartItem/CartItem.styles.ts","components/CartItem/CartItem.tsx","components/Cart/Cart.styles.ts","components/Cart/Cart.tsx","components/Profile/UserProfile.styles.ts","components/Profile/UserProfile.tsx","components/StartingPage/StartingPageContent.styles.ts","components/StartingPage/StartingPageContent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["logoutTimer","AuthContext","React","createContext","token","isLoggedIn","login","expirationTime","logout","calculateRemainingTime","currentTime","Date","getTime","AuthContextProvider","props","initialToken","tokenData","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","duration","retrieveStoredToken","useState","setToken","userIsLoggedIn","logoutHandler","useCallback","clearTimeout","useEffect","console","log","setTimeout","contextValue","setItem","Provider","value","children","Wrapper","styled","section","Login","emailInputRef","useRef","passwordInputRef","authCtx","useContext","isLoading","setIsLoading","onSubmit","event","preventDefault","data","current","axios","post","API_URL","then","response","JSON","stringify","toISOString","className","htmlFor","type","name","id","placeholder","required","ref","data-testid","header","MainNavigation","to","onClick","Layout","div","Item","item","handleAddToCart","src","photo","alt","Description","price","Button","CartItem","addToCart","removeFromCart","amount","toFixed","size","disableElevation","variant","Id","aside","Cart","items","cartItems","length","map","key","reduce","ack","StyledButton","IconButton","getProducts","a","fetch","json","UserProfile","cartOpen","setCartOpen","setCartItems","useQuery","error","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","StartingPageContent","App","path","exact","Boolean","window","location","hostname","match","client","QueryClient","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c79c7f6.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nlet logoutTimer: any;\n\n// using AuthContext obj to refer as type \n\ntype AuthContextObj = {\n    \n    token: any;\n    isLoggedIn: boolean;\n    login: (token: string, expirationTime: string) => void;\n    logout: () => void;\n\n}\n\nconst AuthContext = React.createContext<AuthContextObj>({\n  token: '',\n  isLoggedIn: false,\n  login: (token: string, expirationTime: string) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime: any) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n\n  return remainingDuration;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem('token');\n  const storedExpirationDate = localStorage.getItem('expirationTime');\n\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 3600) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime,\n  };\n};\n\nexport const AuthContextProvider: React.FC = (props) => {\n  const tokenData = retrieveStoredToken();\n  \n  let initialToken;\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  }, []);\n\n  const loginHandler = (token : any, expirationTime: any) => {\n    setToken(token);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationTime', expirationTime);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData, logoutHandler]);\n\n \n\n  const contextValue: AuthContextObj  = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n    margin: 3rem auto;\n    width: 95%;\n    max-width: 25rem;\n    border-radius: 6px;\n    background-color: #38015c;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);\n    padding: 1rem;\n    text-align: center;\n    color: white;\n\n    h1 {\n          text-align: center;\n          color: white;\n     }\n\n     .control {\n          margin-bottom: 0.5rem;\n        }\n        \n        .control label {\n          display: block;\n          color: white;\n          font-weight: bold;\n          margin-bottom: 0.5rem;\n        }\n        \n        .control input {\n          font: inherit;\n          background-color: #f1e1fc;\n          color: #38015c;\n          border-radius: 4px;\n          border: 1px solid white;\n          width: 100%;\n          text-align: left;\n          padding: 0.25rem;\n        }\n        \n        .actions {\n          margin-top: 1.5rem;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        \n        .actions button {\n          cursor: pointer;\n          font: inherit;\n          color: white;\n          background-color: #9f5ccc;\n          border: 1px solid #9f5ccc;\n          border-radius: 4px;\n          padding: 0.5rem 2.5rem;\n        }\n        \n        .actions button:hover {\n          background-color: #873abb;\n          border-color: #873abb;\n        }\n        \n        .actions .toggle {\n          margin-top: 1rem;\n          background-color: transparent;\n          color: #9f5ccc;\n          border: none;\n          padding: 0.15rem 1.5rem;\n        }\n        \n        .actions .toggle:hover {\n          background-color: transparent;\n          color: #ae82cc;\n        }\n`;","import React, { useContext, useState, useRef } from 'react';\nimport axios from 'axios';\nimport AuthContext from '../../store/auth.context';\n// import classes from './Login.module.css';\nimport { Wrapper } from './Login.styles';\n\nconst API_URL = \"https://powerful-plateau-38267.herokuapp.com/https://qo7vrra66k.execute-api.eu-west-1.amazonaws.com/choco/\";\n\nconst Login = () => {\n  // const history = useHistory();\n  const emailInputRef = useRef<HTMLInputElement>(null);\n  const passwordInputRef = useRef<HTMLInputElement>(null);\n  const authCtx = useContext(AuthContext);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // const switchAuthModeHandler = () => {\n  //   setIsLogin((prevState) => !prevState);\n  // };\n\n  const submitHandler = (event: any) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current?.value;\n    const enteredPassword = passwordInputRef.current?.value;\n    var data = {\n      \"email\":enteredEmail,\n      \"password\":enteredPassword\n    }\n    \n    return axios\n      .post(API_URL + \"login\",data)\n      .then(response => {\n        console.log(response);\n        if (response.data.token) {\n          const expirationTime = new Date(\n            new Date().getTime() + 360 * 1000\n          );\n          localStorage.setItem(\"token\", JSON.stringify(response.data));\n          authCtx.login(response.data.token, expirationTime.toISOString());\n        }\n        setIsLoading(false);\n        return response.data;\n      });\n    \n  };\n\n  return (\n    <Wrapper>\n    <section >\n      <form onSubmit={submitHandler}>\n        <div className='control'>\n          <label htmlFor='email'>Your Email</label>\n          <input \n            type='email' \n            name='email' \n            id='email' \n            placeholder='Enter Your Email' \n            required \n            ref={emailInputRef}\n            data-testid=\"email\" \n          />\n        </div>\n        <div className='control'>\n          <label htmlFor='password'>Your Password</label>\n          <input\n            type='password'\n            id='password'\n            placeholder=\"Enter Your Password\"\n            required\n            ref={passwordInputRef}\n            data-testid=\"password\"\n          />\n        </div>\n        <div className='actions'>\n          {!isLoading && (\n            <button>Login</button>\n          )}\n          {isLoading && <p>Sending request...</p>}\n        </div>\n      </form>\n    </section>\n    </Wrapper>\n  );\n}\n\nexport default Login;","import styled from 'styled-components';\n\nexport const Wrapper = styled.header`\n.header {  \nheight: 5rem;\n  background-color: #38015c;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 10%;\n}\n\n  .logo {\n    font-family: 'Lato', sans-serif;\n    font-size: 2rem;\n    color: white;\n    margin: 0;\n  }\n  \n  .header ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    align-items: baseline;\n  }\n  \n  .header li {\n    margin: 0 1rem;\n  }\n  \n  .header a {\n    text-decoration: none;\n    color: white;\n    font-weight: bold;\n  }\n  \n  .header button {\n    font: inherit;\n    background-color: transparent;\n    border: 1px solid white;\n    color: white;\n    font-weight: bold;\n    padding: 0.5rem 1.5rem;\n    border-radius: 6px;\n    cursor: pointer;\n  }\n  \n  .header a:hover {\n    color: #c291e2;\n  }\n  \n  .header button:hover {\n    background-color: #c291e2;\n    color: #38015c;\n  }\n`;","import React from 'react';\nimport { useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth.context';\n// import classes from './MainNavigation.module.css';\nimport { Wrapper } from './MainNavigation.styles';\n\nconst MainNavigation: React.FC = () => {\n  const authCtx = useContext(AuthContext);\n\n  const isLoggedIn = authCtx.isLoggedIn;\n\n  const logoutHandler = () => {\n    authCtx.logout();\n    // optional: redirect the user\n  };\n\n  return (\n    <Wrapper>\n    <header className='header'>\n      <Link to='/'>\n        <div className='logo'>Choco</div>\n      </Link>\n      <nav>\n        <ul>\n          {!isLoggedIn && (\n            <li>\n              <Link to='/login'>Login</Link>\n            </li>\n          )}\n          {isLoggedIn && (\n            <li>\n              <Link to='/profile'>Profile</Link>\n            </li>\n          )}\n          {isLoggedIn && (\n            <li>\n              <button onClick={logoutHandler}>Logout</button>\n            </li>\n          )}\n        </ul>\n      </nav>\n    </header>\n    </Wrapper>\n  );\n};\n\nexport default MainNavigation;\n","import React from 'react';\nimport { Fragment } from 'react';\n\nimport MainNavigation from './MainNavigation';\n\nconst Layout: React.FC = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  border: 1px solid lightblue;\n  border-radius: 20px;\n  height: 100%;\n\n  button {\n    border-radius: 0 0 20px 20px;\n  }\n\n  img {\n    max-height: 250px;\n    object-fit: cover;\n    border-radius: 20px 20px 0 0;\n  }\n\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 1rem;\n    height: 100%;\n  }\n`;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n// Types\nimport { CartItemType } from '../Profile/UserProfile';\n// Styles\nimport { Wrapper } from './Item.styles';\n\ntype Props = {\n  item: CartItemType;\n  handleAddToCart: (clickedItem: CartItemType) => void;\n};\n\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\n  <Wrapper>\n    <img src={item.photo}  alt={item.name}/>\n    <div>\n      <h3>{item.name}</h3>\n      <p>{item.Description}</p>\n      <h3>${item.price}</h3>\n    </div>\n    <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\n  </Wrapper>\n);\n\nexport default Item;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 20px;\n\n  div {\n    flex: 1;\n  }\n\n  .information,\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  img {\n    max-width: 80px;\n    object-fit: cover;\n    margin-left: 40px;\n  }\n`;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n// Types\nimport { CartItemType } from '../Profile/UserProfile';\n// Styles\nimport { Wrapper } from './CartItem.styles';\n\ntype Props = {\n  item: CartItemType;\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => (\n  <Wrapper>\n    <div>\n      <h3>{item.name}</h3>\n      <div className='information'>\n        <p>Price: ${item.price}</p>\n        <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\n      </div>\n      <div className='buttons'>\n        <Button\n          size='small'\n          disableElevation\n          variant='contained'\n          onClick={() => removeFromCart(item.Id)}\n        >\n          -\n        </Button>\n        <p>{item.amount}</p>\n        <Button\n          size='small'\n          disableElevation\n          variant='contained'\n          onClick={() => addToCart(item)}\n        >\n          +\n        </Button>\n      </div>\n    </div>\n    <img src={item.photo}  alt={item.name}/>\n  </Wrapper>\n);\n\nexport default CartItem;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.aside`\n  font-family: Arial, Helvetica, sans-serif;\n  width: 500px;\n  padding: 20px;\n`;\n","import React from 'react';\nimport CartItem from '../CartItem/CartItem';\nimport { Wrapper } from './Cart.styles';\nimport { CartItemType } from '../Profile/UserProfile';\n\ntype Props = {\n  cartItems: CartItemType[];\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n  const calculateTotal = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount * item.price, 0);\n\n  return (\n    <Wrapper>\n      <h2>Your Shopping Cart</h2>\n      {cartItems.length === 0 ? <p>No items in cart.</p> : null}\n      {cartItems.map(item => (\n        <CartItem\n          key={item.Id}\n          item={item}\n          addToCart={addToCart}\n          removeFromCart={removeFromCart}\n        />\n      ))}\n      <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\n    </Wrapper>\n  );\n};\n\nexport default Cart;\n","import styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const Wrapper = styled.div`\n  margin: 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n  position: fixed;\n  z-index: 100;\n  right: 20px;\n  top: 20px;\n`;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\n// Components\nimport Item from '../Item/Item';\nimport Cart from '../Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n// Styles\nimport { Wrapper, StyledButton } from './UserProfile.styles';\n// Types\n\nexport type CartItemType = {\n  Id: number;\n  name: string;\n  Description: string;\n  price: number;\n  photo: string;\n  amount: number;\n};\n// const token = JSON.parse(localStorage.getItem('token'));\nconst getToken = () => {\n  console.log(\"IN\");\n  return localStorage.getItem('token');\n}\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch(`https://powerful-plateau-38267.herokuapp.com/https://qo7vrra66k.execute-api.eu-west-1.amazonaws.com/choco/products?token=${getToken()}`)).json();\n\n \nconst UserProfile = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    'products',\n    getProducts\n  );\n  console.log(data);\n  \n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount, 0);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems(prev => {\n      // 1. Is the item already added in the cart?\n      const isItemInCart = prev.find(item => item.Id === clickedItem.Id);\n\n      if (isItemInCart) {\n        return prev.map(item =>\n          item.Id === clickedItem.Id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n      // First time the item is added\n      return [...prev, { ...clickedItem, amount: 1 }];\n    });\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev =>\n      prev.reduce((ack, item) => {\n        if (item.Id === id) {\n          if (item.amount === 1) return ack;\n          return [...ack, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong ...</div>;\n\n  return (\n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map(item => (\n          <Grid item key={item.Id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default UserProfile;\n","import styled from 'styled-components'; \n\nexport const Wrapper = styled.section`\n  margin: 3rem auto;\n  text-align: center;\n\n h1 {\n  font-size: 5rem;\n}\n`;","import React from 'react';\n// import classes from './StartingPageContent.module.css';\n// Styles\nimport { Wrapper } from './StartingPageContent.styles';\n\nconst StartingPageContent = () => {\n  return (\n    <Wrapper>\n      <section>\n        <h1>Welcome on Board!</h1>\n      </section>\n    </Wrapper>\n  );\n};\n\nexport default StartingPageContent;","import React, { useContext } from 'react';\n\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\nimport Login from './components/Auth/Login';\nimport AuthContext from './store/auth.context';\nimport Layout from './components/Layout/Layout';\nimport UserProfile from './components/Profile/UserProfile';\nimport StartingPageContent from './components/StartingPage/StartingPageContent';\n\nconst App: React.FC = () => {\n  const authCtx = useContext(AuthContext);\n  return (\n    <BrowserRouter>\n    <Layout>\n      <Switch>\n      <Route path='/' exact>\n          <StartingPageContent/>\n        </Route>\n        {!authCtx.isLoggedIn && (\n          <Route path='/login'>\n            <Login/>\n          </Route>\n        )}\n        <Route path='/profile'>\n          {authCtx.isLoggedIn && <UserProfile />}\n          {!authCtx.isLoggedIn && <Redirect to='/login' />}\n        </Route>\n        <Route path='*'>\n          <Redirect to='/' />\n        </Route>\n    </Switch>\n    </Layout>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AuthContextProvider } from './store/auth.context';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n    <AuthContextProvider>\n      <QueryClientProvider client={client}>\n        <BrowserRouter>\n        <App />\n        </BrowserRouter>\n      </QueryClientProvider>\n    </AuthContextProvider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}